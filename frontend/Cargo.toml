[package]
name = "frontend_app"
version = "0.1.0"
authors = ["Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"]
edition = "2021"
include = ["LICENSE-APACHE", "LICENSE-MIT", "**/*.rs", "Cargo.toml"]
rust-version = "1.81"

[package.metadata.docs.rs]
all-features = true
targets = ["x86_64-unknown-linux-gnu", "wasm32-unknown-unknown"]

[dependencies]
egui = "0.31.1"
eframe = { version = "0.31.1", default-features = false, features = [
    "accesskit",     # Make egui compatible with screen readers. NOTE: adds a lot of dependencies.
    "default_fonts", # Embed the default egui fonts.
    "glow",          # Use the glow rendering backend. Alternative: "wgpu".
    "persistence",   # Enable restoring app state when restarting the app.
    "wayland",       # To support Linux (and CI)
] }
log = "0.4"
chrono = { version = "0.4", features = ["serde"] }
thiserror = "1.0"
egui_commonmark = { git = "https://github.com/lampsitter/egui_commonmark", branch = "master" }

# You only need serde if you want app persistence:
serde = { version = "1", features = ["derive"] }
serde_json = "1.0"

# native:
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
env_logger = "0.11"
futures = "0.3"
poll-promise = "0.3"
rfd = "0.14" # Add rfd for native file dialogs
printpdf = "0.7.0" # Add printpdf for basic PDF generation
# Add tokio for native async runtime
tokio = { version = "1", features = ["rt-multi-thread", "macros"] }
# Add native-specific reqwest features (including base json)
reqwest = { version = "=0.12.5", default-features = false, features = ["json", "blocking", "rustls-tls"] }

# web:
[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen-futures = "0.4"
web-sys = "0.3.70"           # to access the DOM (to hide the loading text)
gloo-timers = { version = "0.3.0", features = ["futures"] }
# Enable wasm-bindgen-futures feature for poll-promise only on wasm32
poll-promise = { version = "0.3", features = ["wasm-bindgen-futures"] }
# Add wasm-specific reqwest features (including base json)
reqwest = { version = "=0.12.5", default-features = false, features = ["json"] }

[profile.release]
opt-level = 2 # fast and small wasm

# Optimize all dependencies even in debug builds:
[profile.dev.package."*"]
opt-level = 2


[patch.crates-io]

# If you want to use the bleeding edge version of egui and eframe:
# egui = { git = "https://github.com/emilk/egui", branch = "master" }
# eframe = { git = "https://github.com/emilk/egui", branch = "master" }

# If you fork https://github.com/emilk/egui you can test with:
# egui = { path = "../egui/crates/egui" }
# eframe = { path = "../egui/crates/eframe" }
